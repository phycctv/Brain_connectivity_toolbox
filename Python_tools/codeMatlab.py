#! /usr/bin/env python
# -*- coding: iso-8859-1 -*-

def textCodeMatlab(name):
    """ Depending on entry name, return text corresponding to a part of matlab script used for nifti-files processing (see preporcess.m).

        Returned text is a part of matlab scripts, with matlab notations.
        Values for entry name:
            - "intro"           -> text is the begininng of preprocess.m
            - "QC"              -> text is the "QC quality check" part of preprocess.m
            - "classicSegment"  -> text is the "Classic segmentation and normalization" part of preprocess.m
            - "newSegment"      -> text is the "New segmentation and normalization" part of preprocess.m
            - else text is empty.
        Those parts are included in the script generated by method writeScriptMatlab (module matlabFct.py) to make it possible for user to run matlab script for other preprocessing not supported with python interface but existing in original preprocess.m file, like classic segment or quality check.            
"""
    txt = ""

    if name == "intro":
        txt = """% Preprocessing pipeline for fMRI data (bias field correction, functional
% realignment, functional-structural coregistration, segmentation,
% normalisation, atlasing)
% Original codes : run_experiment.m and preprocess.m

%   functPath: full path to raw functional data
%   structPath: full path to raw structural data
%   atlasPath : full path to atlas 
%   varargin:
%       1)  the processing chain to use, e.g.
%       'procChain',{'realign','QC','coregister','newSegment','label'}
%       2) other arguments for quality control
%       'QCcoef', 1.5
%       3) high-pass filtering
%       'highpass', 0
%
% REQUIREMENTS
% - SPM8
% - IBASPM toolbox
% 
% INSTALLATION
% - SPM8 must be on your matlab path
%
% ACKNOWLEDGEMENTS
% This file borrows liberally from the following sources
% - Rik Henson's example script for SPM 5 (MRC Cognition and Brain Sciences Unit)
% http://en.wikibooks.org/wiki/SPM-Example_batch_script
% - Various functions in the IBASPM toolbox, from Yasser Aleman-Gomez and
% colleages at the Cuba Neurosciences Center
%
% v1.0 Jonas Richiardi
% - initial release for SPM5
% v2.0 Manuel W?thrich
% - SPM8 support
% - use spm jobmanager
% - support for newSegment and unifiedSegmentation
% - port IBASPM auto_labelling to SPM8
% - basic QC capability
% v2.0.1 Jonas Richiardi
% - cross-platformish
% - path settings fixed
% v2.0.1b Jonas Richiardi
% - removed ~ ignore code and changed to 4-output forme for filepart for 
% backwards compatibility with pre-7.9 versions e.g. as in Greedy SCC cluster
% - corrected path setting code"""
        
    elif name == "QC":
        # Quality Check


        txt = """%% QC quality check
if tasksTodo.QC

    % -------------------- load ----------------------------------------
    transData = load(fullfile(alignFolder, ['rp_' functFilenames(1,1:end-3) 'txt']));
    
    functSize = size(spm_read_vols(spm_vol(functFiles{1})));
    intens = zeros(size(functFiles,1),1);
    intensTop100 = zeros(size(functFiles,1),1);
    angle = zeros(size(transData,1),1);
    transl = zeros(size(transData,1),1);
    maxTransl = zeros(size(functFiles,1),1);
    corners = cell(8,1);
    
    for k = 0:7
        mask = dec2bin(k,3) == '1';
        corners{k+1} = (mask .* functSize)';
    end
    
    for i = 1:size(functFiles,1)
        transMatrix = spm_matrix(transData(i,:));
        quat = dcm2qua(transMatrix(1:3,1:3));
        angle(i) = 2*acos(quat(1))/(2*pi)*360;
        transl(i) = norm(transMatrix(1:3,4));
        for k = 1:8
            dist = norm(corners{k} - transMatrix(1:3,:) * [corners{k};1]);
            if dist > maxTransl(i), maxTransl(i) = dist; end
        end
        
        image = spm_read_vols(spm_vol(functFiles{i}));
        intens(i) = mean(image(:));
        array = sort(image(:),'descend');
        intensTop100(i) = mean(array(1:100));
    end    
   
    intens = (intens-mean(intens))/std(intens);
    intensTop100 = (intensTop100-mean(intensTop100))/std(intensTop100); 
    
    % ---------- compute outliers --------------------------------------
    x = (1:size(intens,1))';
    c = polyfit(x,intens,2);
    f = polyval(c,x);
    
    % ---------  on mean intensity -------------------------------------
    sortIntens = sort(intens);
    lQ = sortIntens(round(0.25*size(intens,1)));
    uQ = sortIntens(round(0.75*size(intens,1)));
    IQR = uQ - lQ;
    min = f + lQ - QCcoef*IQR;
    max = f + uQ + QCcoef*IQR;
    
    indexInt = [find(intens > max); find(intens < min)];
    
%     figure;
%     plot(intens,'b'); hold on;
%     plot(max,'g');
%     plot(min,'g');
%     plot(indexInt,intens(indexInt),'ro');hold off;
    
%    ---------- compute outliers --------------------------------------
%     x = (1:size(intensTop100,1))';
%     c = polyfit(x,intensTop100,2);
%     f = polyval(c,x);
    
    %----------- on mean intensity of top 100 voxels ------------------
%     sortIntensTop100 = sort(intensTop100);
%     lQ = sortIntensTop100(round(0.25*size(intensTop100,1)));
%     uQ = sortIntensTop100(round(0.75*size(intensTop100,1)));
%     IQR = uQ - lQ;
%     min = f + lQ - 1.5*IQR;
%     max = f + uQ + 1.5*IQR;
%     
%     indexTop100 = [find(intensTop100 > max); find(intensTop100 < min)];
%     
%     
%     
%     
%     
%     figure;
%     plot(intensTop100,'b'); hold on;
%     plot(max,'g');
%     plot(min,'g');
%     plot(indexTop100,intensTop100(indexTop100),'ro');hold off;
%     
    % ------------ apply ---------------------------------------------
    mask = zeros(size(intens,1),1);
    mask(indexInt) = 1;
    
    if highpass
        mkdir(QCFolder);
        alignFilenames = spm_select('List',alignFolder,['^r.*\.' volExt '$']);
        alignFiles=cell(size(alignFilenames,1),1);
        QCFiles=cell(size(alignFilenames,1),1);
        for f=1:size(alignFilenames,1)
            alignFiles{f}=fullfile(alignFolder,alignFilenames(f,:));
            QCFiles{f}=fullfile(QCFolder,alignFilenames(f,:));
        end

        for i = size(functFiles,1):-1:1
           if mask(i) == 0, copyfile(alignFiles{i},QCFolder);
           else QCFiles(i) = []; end
        end

        highpassFilter(char(QCFiles), 2, 0);

        for f=1:size(QCFiles,1)
            delete(QCFiles{f});
        end
    end
    
    
    
    % -------------- save artifacts ----------------------------------
    artifacts = struct('rotation', {angle}, 'translation', {transl},'maxTranslation',{maxTransl},...
        'intensity', {intens}, 'intensityTop100', {intensTop100},'mask',mask);
    save(fullfile(alignFolder, 'artifacts'), 'artifacts');
    
    %---------------- update tasksTodo -------------------------
    tasksDone.QC = 1;
    save(fullfile(jobFolder, 'tasksDone.mat'), 'tasksDone');
end"""

    elif name == "classicSegment":
    # classic Segment
        txt = """%% Classic segmentation and normalization
if tasksTodo.segment == CLASSICSEGMENT

    structVol = spm_vol(structFile);
    templVol = spm_vol(fullfile(spm('Dir'),'templates','T1.nii'));
    
    % -------------- segmentation --------------------------------
    fprintf('%s','* Segmentation... ');
    mkdir(segFolder);
    defaults.segment.write.wrt_cor = 0;
    
    pm_segment(structVol,templVol,defaults.segment);
    movefile(fullfile(structPath,'c*'), segFolder);
    fprintf('%s\\n','Segmentation done.');

    % -------------- normalization -----------------------------
    fprintf('%s','* Normalisation... ');
    mkdir(normFolder);
    
    spm_normalise(templVol, structVol);
    matfile = fullfile(structPath,[structFilename(1:end-4) '_sn.mat']);
    spm_write_sn(structVol.fname, matfile);
    
    movefile(fullfile(structPath,'w*'), normFolder);
    movefile(fullfile(structPath,'*sn.mat'), normFolder);
    
    fprintf('%s\\n','Normalisation done.');
    
    % ------------ update tasksTodo -------------------------------
    tasksDone.segment = CLASSICSEGMENT;
    save(fullfile(jobFolder, 'tasksDone.mat'), 'tasksDone');
    
end"""

    elif name == "newSegment":
    # new segment
        txt = """%% New segmentation and normalization
if tasksTodo.segment == NEWSEGMENT
    
    % --------- do segmentation ---------------------------------
    mkdir(segFolder);
    
    jobs = {fullfile(jobsParentPath,'jobs','newSegment_job.m')};
    spm_jobman('serial', jobs, '', cellstr(structFile));
    
    movefile(fullfile(structPath,'i*'), segFolder);
    movefile(fullfile(structPath,'y*'), segFolder);
    movefile(fullfile(structPath,'c*'), segFolder);
    movefile(fullfile(structPath,'*seg8.mat'), segFolder);
    copyfile(jobs{:}, jobFolder);
   
    % ----------- normalization ----------------------------------
    mkdir(normFolder);
    
    jobs = {fullfile(jobsParentPath,'jobs','deform_job.m')};
    inputs = cell(3, 1);
    inputs{1} = {fullfile(segFolder,['y_' structFilename])};
    inputs{2} = {structFile};
    inputs{3} = {normFolder};
    spm_jobman('serial', jobs, '', inputs{:});
    
    copyfile(jobs{:}, jobFolder);
    
    % ------------ update tasksTodo -------------------------------
    tasksDone.segment = NEWSEGMENT;
    save(fullfile(jobFolder, 'tasksDone.mat'), 'tasksDone');
end"""

        
    return txt
